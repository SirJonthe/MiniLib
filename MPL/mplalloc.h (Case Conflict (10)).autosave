#ifndef MPL_ALLOC_H_INCLUDED__
#define MPL_ALLOC_H_INCLUDED__

#include "mplCommon.h"

namespace mpl
{
	class aligned
	{
	private:
		char *mem;
		void *ptr;

	public:
		aligned( void ) : mem(NULL), ptr(NULL) {}
		explicit aligned(size_t elem_count) : mem(NULL), ptr(NULL) { alloc(elem_count); }
		~aligned( void ) { free(); }

		void alloc(size_t elem_count)
		{
			this->free();
			if (elem_count > 0) {
				mem = new char[elem_count*sizeof(type_t) + MPL_BYTE_ALIGN];
				ptr = (void*)((size_t)(mem + MPL_BYTE_ALIGN) & MPL_BYTE_ALIGN_MASK);
			}
		}
		void free( void )
		{
			delete [] mem;
			mem = NULL;
			ptr = NULL;
		}

		operator       void*( void )       { return ptr; }
		operator const type_t*( void ) const { return ptr; }
	};
}

#endif // MPL_ALLOC_H_INCLUDED__
