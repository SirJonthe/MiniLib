#include "mglText.h"
#include "../MML/mmlFixed.h"

#define first_char mglFont_FirstChar
#define last_char  mglFont_LastChar

#define font_big_width             128
#define font_big_height            128
#define font_big_char_count_width  12
#define font_big_char_count_height 8
#define font_big_char_width_px     mglFontBig_CharWidthPx
#define font_big_char_height_px    mglFontBig_CharHeightPx

static const mtlByte font_big_bits[] = {
   0xf8, 0x23, 0x1e, 0xf1, 0xd7, 0xc7, 0x07, 0x3f, 0xfe, 0xc1, 0xe0, 0xbf,
   0xff, 0xff, 0xff, 0xff, 0xf8, 0x23, 0x1e, 0x71, 0x80, 0xc7, 0x03, 0x3e,
   0xfe, 0xc0, 0xc0, 0x0f, 0xfe, 0xff, 0xff, 0xff, 0xf8, 0x23, 0x0e, 0x20,
   0x80, 0xc7, 0x73, 0x7e, 0xff, 0xc0, 0xc0, 0x1f, 0x7f, 0xfc, 0xff, 0xff,
   0xf8, 0xef, 0x0e, 0x20, 0xea, 0xff, 0x23, 0xfe, 0xff, 0xf8, 0xc7, 0x1f,
   0x7f, 0xfc, 0xff, 0xff, 0xf8, 0xff, 0x0f, 0x20, 0xc0, 0x00, 0x02, 0xff,
   0xff, 0xf8, 0xc7, 0xef, 0x1e, 0xf0, 0xff, 0xff, 0xf8, 0xff, 0x1f, 0x31,
   0x80, 0x00, 0x86, 0xf8, 0xff, 0xf8, 0xc7, 0xff, 0x1f, 0xf0, 0xff, 0xff,
   0xf8, 0xff, 0x0f, 0x60, 0x80, 0x00, 0x02, 0xfc, 0xff, 0xf8, 0xc7, 0xff,
   0x1f, 0xf0, 0xff, 0xff, 0xf8, 0xff, 0x0f, 0xe0, 0x8a, 0xff, 0x33, 0xfe,
   0xff, 0xf8, 0xc7, 0xff, 0x7f, 0xfc, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x20,
   0x80, 0xc7, 0x73, 0xfc, 0xff, 0xc0, 0xc0, 0xff, 0x7f, 0x3c, 0xfe, 0xff,
   0xf8, 0xff, 0x1f, 0x31, 0xc0, 0xc7, 0x03, 0xf8, 0xff, 0xc0, 0xc0, 0xff,
   0xff, 0x3f, 0xfe, 0xff, 0xf8, 0xff, 0x1f, 0x71, 0xfd, 0xc7, 0x07, 0xf9,
   0xff, 0xc1, 0xe0, 0xff, 0xff, 0x3f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x78, 0xc0, 0xc3, 0x03, 0x1c,
   0x30, 0x8e, 0x00, 0x06, 0x0c, 0x60, 0xc0, 0xff, 0xff, 0xff, 0xff, 0x38,
   0x80, 0xc1, 0x03, 0x08, 0x20, 0x8e, 0x00, 0x02, 0x0c, 0x20, 0x80, 0xff,
   0xff, 0xff, 0x7f, 0x3c, 0x80, 0xc1, 0x03, 0x08, 0x20, 0x8e, 0x00, 0x02,
   0x0c, 0x20, 0x80, 0xff, 0xff, 0xff, 0x7f, 0x3c, 0x8e, 0xc7, 0xff, 0x88,
   0x23, 0x8e, 0xf8, 0xe3, 0xff, 0x23, 0x8e, 0xff, 0x01, 0xff, 0x3f, 0x3e,
   0x86, 0xc7, 0x07, 0xf8, 0x21, 0x80, 0x00, 0x03, 0xfc, 0x23, 0x80, 0xff,
   0x01, 0xff, 0x3f, 0x3e, 0x8a, 0xc7, 0x03, 0xf8, 0x30, 0x80, 0x00, 0x02,
   0xf8, 0x71, 0xc0, 0xff, 0x01, 0xff, 0x1f, 0x3f, 0x8c, 0xc7, 0x03, 0xfc,
   0x61, 0x80, 0x00, 0x02, 0xf8, 0x31, 0x80, 0xff, 0xff, 0xff, 0x1f, 0x3f,
   0x8e, 0xc7, 0xe3, 0x8f, 0xe3, 0x8f, 0x3f, 0xe2, 0xf8, 0x31, 0x8e, 0xff,
   0xff, 0xe3, 0x8f, 0x3f, 0x80, 0x01, 0x03, 0x08, 0xe0, 0x8f, 0x00, 0x02,
   0xf8, 0x38, 0x80, 0xff, 0xff, 0xe3, 0x8f, 0x3f, 0x80, 0x01, 0x03, 0x08,
   0xe0, 0x8f, 0x00, 0x02, 0xf8, 0x38, 0x80, 0xff, 0xff, 0xe3, 0x8f, 0x7f,
   0xc0, 0x01, 0x03, 0x18, 0xf0, 0x8f, 0x00, 0x07, 0xfc, 0x78, 0xc0, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0x1f, 0x70, 0xc0, 0x01, 0x03, 0x1c, 0x30, 0xc0, 0xff,
   0x00, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x20, 0x80, 0x00, 0x02,
   0x08, 0x20, 0x80, 0xff, 0x00, 0xfe, 0xff, 0xff, 0xe3, 0x01, 0xc7, 0x0f,
   0x20, 0x9f, 0x00, 0x02, 0x08, 0x20, 0x80, 0xff, 0x38, 0xe2, 0x8f, 0xff,
   0xf1, 0x01, 0x8f, 0x8f, 0x23, 0x83, 0x38, 0xe2, 0x88, 0x23, 0x8e, 0xff,
   0x00, 0xe2, 0x8f, 0xff, 0xf8, 0x01, 0x1f, 0xff, 0x20, 0x81, 0x38, 0x02,
   0x88, 0x3f, 0x8e, 0xff, 0x00, 0xe2, 0x8f, 0x7f, 0xfc, 0xff, 0x3f, 0x7e,
   0x30, 0x99, 0x00, 0x02, 0x8c, 0x3f, 0x8e, 0xff, 0x01, 0xfe, 0xff, 0xff,
   0xf8, 0x01, 0x1f, 0x7f, 0x3c, 0x81, 0x00, 0x02, 0x88, 0x3f, 0x8e, 0xff,
   0x3f, 0xfe, 0xff, 0xff, 0xf1, 0x01, 0x8f, 0x7f, 0x3c, 0x83, 0x00, 0xe2,
   0x88, 0x23, 0x8e, 0xff, 0x01, 0xe2, 0x8f, 0xff, 0xe3, 0x01, 0xc7, 0xff,
   0x3f, 0xff, 0x38, 0x02, 0x08, 0x20, 0x80, 0xff, 0x01, 0xe2, 0x8f, 0xff,
   0xff, 0xff, 0xff, 0x7f, 0x3c, 0x80, 0x38, 0x02, 0x08, 0x20, 0x80, 0xff,
   0x01, 0xe3, 0x8f, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7c, 0xc0, 0x38, 0x02,
   0x1c, 0x30, 0xc0, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0x00, 0x02, 0x18, 0x30, 0x8e, 0x83, 0x03, 0x88, 0x23, 0xfe, 0x38, 0xe2,
   0x18, 0x30, 0xc0, 0xff, 0x00, 0x02, 0x08, 0x20, 0x8e, 0x83, 0x03, 0x88,
   0x23, 0xfe, 0x10, 0xe2, 0x08, 0x20, 0x80, 0xff, 0x00, 0x02, 0x08, 0x20,
   0x8e, 0x83, 0x03, 0x88, 0x23, 0xfe, 0x00, 0xe2, 0x08, 0x20, 0x80, 0xff,
   0xf8, 0xe3, 0x8f, 0x23, 0x8e, 0xc7, 0xff, 0x88, 0x23, 0xfe, 0x00, 0xc2,
   0x88, 0x23, 0x8e, 0xff, 0xc0, 0x03, 0x8f, 0x3f, 0x80, 0xc7, 0xff, 0x08,
   0x20, 0xfe, 0x00, 0x82, 0x88, 0x23, 0x8e, 0xff, 0xc0, 0x03, 0x8f, 0x20,
   0x80, 0xc7, 0xff, 0x08, 0x30, 0xfe, 0x28, 0x02, 0x88, 0x23, 0x80, 0xff,
   0xc0, 0x03, 0x8f, 0x20, 0x80, 0xc7, 0xe3, 0x08, 0x20, 0xfe, 0x38, 0x22,
   0x88, 0x23, 0x80, 0xff, 0xf8, 0xe3, 0x8f, 0x23, 0x8e, 0xc7, 0xe3, 0x88,
   0x23, 0xfe, 0x38, 0x62, 0x88, 0x23, 0xc0, 0xff, 0x00, 0xe2, 0x0f, 0x20,
   0x8e, 0x83, 0x03, 0x88, 0x23, 0x80, 0x38, 0xe2, 0x08, 0x20, 0xfe, 0xff,
   0x00, 0xe2, 0x0f, 0x20, 0x8e, 0x83, 0x03, 0x88, 0x23, 0x80, 0x38, 0xe2,
   0x08, 0x20, 0xfe, 0xff, 0x00, 0xe2, 0x1f, 0x30, 0x8e, 0x83, 0x07, 0x8c,
   0x23, 0x80, 0x38, 0xe2, 0x18, 0x30, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0x01, 0x03, 0x1c, 0x30, 0x80, 0x38, 0xe2, 0x88,
   0x23, 0x8e, 0x38, 0x02, 0x38, 0x30, 0xfe, 0xff, 0x00, 0x02, 0x08, 0x20,
   0x80, 0x38, 0xe2, 0x88, 0x23, 0x8e, 0x38, 0x02, 0x38, 0x30, 0xfe, 0xff,
   0x00, 0x02, 0x08, 0x20, 0x80, 0x38, 0xe2, 0x88, 0x23, 0x8e, 0x38, 0x02,
   0x38, 0x70, 0xfc, 0xff, 0x38, 0xe2, 0x88, 0xff, 0xf1, 0x38, 0xe2, 0x88,
   0x23, 0x84, 0x38, 0xfe, 0x38, 0x7e, 0xfc, 0xff, 0x38, 0xe2, 0x08, 0xf0,
   0xf1, 0x38, 0xe2, 0x88, 0x23, 0x80, 0x00, 0x0e, 0x38, 0xfe, 0xf8, 0xff,
   0x38, 0x02, 0x08, 0xe0, 0xf1, 0x38, 0xe2, 0x88, 0x62, 0xc0, 0x00, 0x06,
   0x3c, 0xfe, 0xf8, 0xff, 0x08, 0x02, 0x1c, 0xe0, 0xf1, 0x38, 0xe2, 0x08,
   0x20, 0x80, 0x01, 0x03, 0x3e, 0xfe, 0xf1, 0xff, 0x08, 0x02, 0xf8, 0xe3,
   0xf1, 0x38, 0x42, 0x08, 0x20, 0x84, 0xc7, 0xe3, 0x3f, 0xfe, 0xf1, 0xff,
   0x00, 0xe2, 0x08, 0xe0, 0xf1, 0x00, 0x06, 0x0c, 0x20, 0x8e, 0xc7, 0x03,
   0x38, 0xf0, 0xe3, 0xff, 0x00, 0xe2, 0x08, 0xe0, 0xf1, 0x00, 0x0e, 0x0e,
   0x21, 0x8e, 0xc7, 0x03, 0x38, 0xf0, 0xe3, 0xff, 0x01, 0xe2, 0x18, 0xf0,
   0xf1, 0x01, 0x1f, 0x8f, 0x23, 0x8e, 0xc7, 0x03, 0x38, 0xf0, 0xe3, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0xbf, 0xff, 0xff,
   0xf8, 0xff, 0xe3, 0xff, 0xff, 0x8f, 0xff, 0x0f, 0xfc, 0x3f, 0xfe, 0xff,
   0xc0, 0x1f, 0xff, 0xff, 0xf8, 0xff, 0xe3, 0xff, 0xff, 0x8f, 0xff, 0x07,
   0xfc, 0x3f, 0xfe, 0xff, 0xc0, 0x0f, 0xfe, 0xff, 0xf8, 0xff, 0xe3, 0xff,
   0xff, 0x8f, 0xff, 0x07, 0xfc, 0x3f, 0xfe, 0xff, 0xc7, 0x4f, 0xfe, 0xff,
   0xfb, 0x01, 0x03, 0x1c, 0x60, 0x80, 0x01, 0xc7, 0x1f, 0x20, 0xc0, 0xff,
   0xc7, 0xef, 0xfe, 0xff, 0xff, 0x00, 0x02, 0x08, 0x20, 0x80, 0x00, 0x06,
   0x0f, 0x20, 0x80, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xff, 0x00, 0x02, 0x08,
   0x20, 0x80, 0x38, 0x06, 0x0f, 0x20, 0x80, 0xff, 0xc7, 0xff, 0xff, 0xff,
   0xff, 0x38, 0xe2, 0x88, 0x3f, 0x8e, 0x00, 0x06, 0x8f, 0x23, 0x8e, 0xff,
   0xc7, 0xff, 0xff, 0xff, 0xff, 0x38, 0xe2, 0x88, 0x3f, 0x8e, 0xf8, 0xc7,
   0x8f, 0x23, 0x8e, 0xff, 0xc0, 0xff, 0x0f, 0xe0, 0xff, 0x00, 0x02, 0x08,
   0x20, 0x80, 0x00, 0xc6, 0x0f, 0x20, 0x8e, 0xff, 0xc0, 0xff, 0x0f, 0xe0,
   0xff, 0x00, 0x02, 0x08, 0x20, 0x80, 0x00, 0xc6, 0x0f, 0x20, 0x8e, 0xff,
   0xc0, 0xff, 0x0f, 0xe0, 0xff, 0x01, 0x02, 0x1c, 0x60, 0x80, 0x01, 0xc6,
   0x1f, 0x20, 0x8e, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xe3, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xe0, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0x3f, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0x3f, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0x8f, 0x7f, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0x7f, 0xfc, 0xff, 0xff, 0xff, 0x8f, 0x7f, 0xfc, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xfc, 0xff, 0xff, 0xff, 0x8f, 0x63,
   0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xfc, 0xff,
   0xc7, 0x3f, 0x8e, 0x61, 0xfc, 0x10, 0x03, 0x1c, 0x30, 0xc0, 0x01, 0x46,
   0x3c, 0x70, 0xfc, 0xff, 0xc7, 0x3f, 0x8e, 0x70, 0xfc, 0x00, 0x02, 0x08,
   0x20, 0x80, 0x00, 0x06, 0x1c, 0x70, 0xf0, 0xff, 0xff, 0xff, 0x0f, 0x78,
   0xfc, 0x00, 0x02, 0x08, 0x20, 0x80, 0x00, 0x06, 0x9c, 0x7f, 0xf0, 0xff,
   0xc7, 0x3f, 0x0e, 0x7c, 0xfc, 0x28, 0xe2, 0x88, 0x23, 0x8e, 0x38, 0x86,
   0x1f, 0x78, 0xf0, 0xff, 0xc7, 0x3f, 0x0e, 0x78, 0xfc, 0x38, 0xe2, 0x88,
   0x23, 0x8e, 0x38, 0xc6, 0x3f, 0x70, 0xfc, 0xff, 0xc7, 0x3f, 0x8e, 0x70,
   0xe0, 0x38, 0xe2, 0x08, 0x20, 0x80, 0x00, 0xc6, 0xff, 0x73, 0xe0, 0xff,
   0x83, 0x3f, 0x8e, 0x61, 0xe0, 0x38, 0xe2, 0x08, 0x20, 0x80, 0x00, 0xc6,
   0x1f, 0x70, 0xe0, 0xff, 0x83, 0x3f, 0x8e, 0xe3, 0xe0, 0x38, 0xe2, 0x18,
   0x30, 0xc0, 0x01, 0xc6, 0x1f, 0xf8, 0xe0, 0xff, 0xff, 0x23, 0xfe, 0xff,
   0xff, 0xff, 0xff, 0xff, 0x3f, 0xfe, 0x3f, 0xfe, 0xff, 0xff, 0xff, 0xff,
   0xff, 0x03, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xfe, 0x3f, 0xfe,
   0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff,
   0x3f, 0xfe, 0x3f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0x07, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0x3f, 0xfe, 0x3f, 0xfe, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f,
   0xf0, 0xf8, 0xe0, 0x5f, 0x0f, 0x20, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0x3f, 0xf0, 0xf8, 0xc0, 0x0f, 0xef, 0xaf, 0xbf, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xf0, 0xf8, 0xc0, 0x0f,
   0xef, 0xaf, 0xbf, 0xff, 0x38, 0xe2, 0x88, 0x23, 0x8e, 0x38, 0x02, 0x38,
   0xfe, 0xf8, 0xc7, 0xaf, 0xef, 0xaf, 0xbf, 0xff, 0x38, 0xe2, 0x88, 0x23,
   0x8e, 0x38, 0x02, 0x78, 0xfe, 0xf8, 0xe7, 0xff, 0xef, 0xaf, 0xbf, 0xff,
   0x38, 0xe2, 0x88, 0x63, 0xc4, 0x38, 0x7e, 0x38, 0xff, 0xf8, 0xcf, 0xff,
   0xef, 0xaf, 0xbf, 0xff, 0x38, 0xe2, 0x88, 0xe3, 0xe0, 0x38, 0x1e, 0x7c,
   0xfe, 0xf8, 0xe7, 0xff, 0xef, 0xaf, 0xbf, 0xff, 0x38, 0x42, 0x88, 0xe2,
   0xe0, 0x38, 0x06, 0x3f, 0xfe, 0xf8, 0xc7, 0xff, 0xef, 0xaf, 0xbf, 0xff,
   0x00, 0x06, 0x0c, 0x60, 0xc4, 0x00, 0xc2, 0x3f, 0xf0, 0xf8, 0xc0, 0xff,
   0xef, 0xaf, 0xbf, 0xff, 0x00, 0x0e, 0x0e, 0x20, 0x8e, 0x00, 0x02, 0x38,
   0xf0, 0xf8, 0xc0, 0xff, 0xef, 0xaf, 0xbf, 0xff, 0x01, 0x1e, 0x1f, 0x30,
   0x8e, 0x01, 0x02, 0x78, 0xf0, 0xf8, 0xe0, 0xff, 0x0f, 0x20, 0x80, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0xfe, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0x03, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

#define font_small_width              64
#define font_small_height             64
#define font_small_char_count_width   10
#define font_small_char_count_height  10
#define font_small_char_width_px      mglFontSmall_CharWidthPx
#define font_small_char_height_px     mglFontSmall_CharHeightPx

static const mtlByte font_small_bits[] = {
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7d, 0xbd, 0x06, 0x77,
   0xdc, 0xef, 0xfd, 0xff, 0x7d, 0x1d, 0xa4, 0xff, 0xde, 0xf7, 0xfb, 0xfe,
   0xfd, 0xbf, 0x06, 0x41, 0xf5, 0xf7, 0x7b, 0xfd, 0xff, 0x1f, 0x2c, 0x7f,
   0xfb, 0xf7, 0xfb, 0xfe, 0xfd, 0xbf, 0x06, 0x77, 0xf4, 0xef, 0xfd, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x5f,
   0x70, 0x07, 0x41, 0xf7, 0xfb, 0xff, 0xff, 0x6f, 0x37, 0x7f, 0x5f, 0xf7,
   0xf1, 0x1f, 0xff, 0x77, 0x75, 0x07, 0x43, 0xf0, 0xfb, 0xfe, 0xff, 0x7b,
   0x77, 0xf7, 0xdf, 0xf7, 0x7f, 0xff, 0xf7, 0x7d, 0x10, 0x04, 0xc1, 0xf7,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x41, 0x10, 0x04, 0xc1,
   0xff, 0xdf, 0x7f, 0xff, 0x7d, 0xff, 0x75, 0x5d, 0xbf, 0xef, 0xf1, 0xfe,
   0x41, 0xf0, 0x04, 0xc1, 0xff, 0xf7, 0xff, 0xfd, 0x5f, 0xf7, 0x75, 0x5f,
   0xbf, 0xef, 0xf1, 0xfe, 0x41, 0xf0, 0x05, 0xdf, 0xdf, 0xdf, 0x7f, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x41, 0x10, 0x84, 0x43,
   0x18, 0x04, 0x41, 0xf7, 0x5f, 0xd7, 0xb5, 0x7d, 0xd7, 0xf7, 0x7d, 0xf7,
   0x41, 0x13, 0x04, 0x7d, 0x17, 0x86, 0x45, 0xf0, 0x7f, 0xd5, 0x75, 0x7d,
   0xd7, 0xf7, 0x5d, 0xf7, 0x7d, 0xd1, 0x05, 0x41, 0x10, 0xf4, 0x41, 0xf7,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x41, 0xd0, 0xf5, 0x49,
   0x17, 0x04, 0x41, 0xf0, 0xf7, 0xd7, 0xf5, 0x55, 0xd6, 0x75, 0x5d, 0xf7,
   0xf7, 0x17, 0xf6, 0x5d, 0xd5, 0x05, 0x5d, 0xf0, 0x77, 0xd7, 0xf5, 0x5d,
   0xd3, 0xf5, 0x4d, 0xfb, 0x41, 0xd0, 0x05, 0x5d, 0x17, 0xf4, 0x41, 0xf7,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x43, 0xd0, 0x75, 0x5d,
   0xd7, 0x05, 0x79, 0xff, 0xfd, 0xdd, 0x75, 0x5d, 0xd7, 0x7d, 0xfd, 0xfe,
   0xc1, 0xdd, 0x75, 0xdd, 0xb8, 0x8e, 0xfd, 0xfd, 0xdf, 0xdd, 0xad, 0x55,
   0x77, 0xf7, 0xfd, 0xfb, 0xe1, 0x1d, 0xdc, 0x49, 0x77, 0x07, 0xf9, 0xf7,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xfe, 0xf7, 0x41,
   0x38, 0x84, 0x41, 0xf0, 0x7b, 0xfd, 0xef, 0x5d, 0xdb, 0x77, 0x7d, 0xff,
   0xfb, 0xff, 0xff, 0x41, 0xd0, 0x77, 0x61, 0xf8, 0xfb, 0xff, 0xff, 0x5d,
   0xd7, 0x77, 0x7d, 0xff, 0xf9, 0x1f, 0xfc, 0x5d, 0x10, 0x04, 0x41, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x41, 0x17, 0x04, 0x5d,
   0x9f, 0x74, 0x41, 0xf0, 0x7d, 0x77, 0x7f, 0x5d, 0x5f, 0x65, 0x5d, 0xf7,
   0x45, 0x70, 0x7f, 0x61, 0xdf, 0x55, 0x5d, 0xf0, 0x5d, 0x77, 0x77, 0x5d,
   0xdf, 0x35, 0x5d, 0xff, 0x41, 0x17, 0x04, 0x5d, 0xd0, 0x75, 0x41, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x41, 0x30, 0x04, 0x5d,
   0xd7, 0x75, 0x5d, 0xf0, 0x5d, 0xd7, 0xdf, 0x5d, 0xd7, 0x75, 0xdd, 0xf7,
   0x5d, 0x10, 0xdc, 0x5d, 0xd7, 0x8d, 0xeb, 0xf8, 0x4d, 0xfb, 0xdd, 0xdd,
   0x5a, 0x75, 0x77, 0xff, 0x41, 0x17, 0xde, 0xc1, 0x9d, 0x74, 0x77, 0xf0,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x73, 0x9f, 0xaf, 0x41,
   0x10, 0x04, 0x41, 0xf0, 0x7b, 0xbf, 0xd7, 0x41, 0x10, 0x04, 0x41, 0xf0,
   0x7d, 0x7f, 0xff, 0x41, 0x10, 0x04, 0x41, 0xf0, 0x7b, 0xbf, 0xff, 0x41,
   0x10, 0x04, 0x41, 0xf0, 0x73, 0x9f, 0xff, 0x41, 0x10, 0x04, 0x41, 0xf0,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
   0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

unsigned char mglExtractStencilBit(const mtlByte *stencil_bits, int num_bits_width, int x, int y)
{
	// Don't use CHAR_BITS:
	// Each byte has 8 bits of data regardless of if the byte is larger than 8 bits
	//stencil_bits += y * (num_bits_width >> 3);
	//stencil_bits += x >> 3;
	//unsigned char bit = mtlReadBit(*stencil_bits, x & 7);
	unsigned char bit = mtlReadBit<unsigned char>(stencil_bits, x + y * num_bits_width);
	return bit != 0 ? 0x0 : 0xff;
}

void mglText(const mtlChars &text, const mtlByte *stencil_bits, int font_width, int char_count_width, int char_width, int char_height, mtlByte *dst, int dst_bpp, mglByteOrder32 dst_order, int dst_w, int dst_h, int x, int y, mtlByte r, mtlByte g, mtlByte b, int scale)
{
	// implement with no scaling at first

	if (dst_bpp != 3 && dst_bpp != 4) { return; }

	int screen_x = x;
	int screen_y = y;

	if (screen_y >= dst_h) { return; } // text can never be on screen

	unsigned char *dst0 = dst;

	int char_width0  = char_width;
	int char_height0 = char_height;
	char_width  *= scale;
	char_height *= scale;

	for (int t_i = 0; t_i < text.GetSize(); ++t_i) {
		char ch = text[t_i];
		if (mtlChars::IsNewline(ch)) {
			screen_x = x;
			screen_y += char_height;
			if (screen_y >= dst_h) {
				return; // text falls outside of screen
			}
			continue;
		}

		if (mtlChars::IsWhitespace(ch) || screen_y < 0 || screen_x < 0 || screen_x >= dst_w) {
			// white space, or
			// character is outside of screen
			screen_x += char_width;
			continue;
		}

		if (ch < first_char || ch > last_char) {
			ch = last_char + 1;
		}

		int ch_index = ch - first_char;
		int ch_x = (ch_index % char_count_width) * char_width0;
		int ch_y = (ch_index / char_count_width) * char_height0;

		int start_i = screen_x < 0 ? -screen_x : 0;
		screen_x    = screen_x < 0 ? 0         : screen_x;
		int start_j = screen_y < 0 ? -screen_y : 0;
		screen_y    = screen_y < 0 ? 0         : screen_y;
		int end_i   = (screen_x + char_width)  >= dst_w ? dst_w - screen_x : char_width;
		int end_j   = (screen_y + char_height) >= dst_h ? dst_h - screen_y : char_height;

		//mml_fixed_real<unsigned int, 16> x_scale = ch_x;
		//mml_fixed_real<unsigned int, 16> y_scale = ch_y;

		for (int j = start_j; j < end_j; ++j) {
			dst = dst0 + (screen_x + (screen_y + j) * dst_w) * dst_bpp;
			//int scaled_j = j / scale;
			for (int i = start_i; i < end_i; ++i) {
				unsigned char bit = mglExtractStencilBit(stencil_bits, font_width, ch_x + i / scale, ch_y + scaled_j); // we can avoid a division per pixel by doing fixed point arithmetic
				dst[dst_order.index.r] |= (bit & r);
				dst[dst_order.index.g] |= (bit & g);
				dst[dst_order.index.b] |= (bit & b);
				dst += dst_bpp;
			}
		}
		screen_x += char_width;
	}
}

void mglTextBig(const mtlChars &text, mtlByte *dst, int dst_bytes_per_pixel, mglByteOrder32 dst_order, int dst_w, int dst_h, int x, int y, mtlByte r, mtlByte g, mtlByte b, int scale)
{
	mglText(
		text,
		font_big_bits, font_big_width,
		font_big_char_count_width,
		font_big_char_width_px, font_big_char_height_px,
		dst, dst_bytes_per_pixel, dst_order, dst_w, dst_h,
		x, y,
		r, g, b,
		scale
	);
}

void mglTextBig(int num, mtlByte *dst, int dst_bytes_per_pixel, mglByteOrder32 dst_order, int dst_w, int dst_h, int x, int y, mtlByte r, mtlByte g, mtlByte b, int scale)
{
	mtlString text;
	text.FromInt(num);
	mglTextBig(text, dst, dst_bytes_per_pixel, dst_order, dst_w, dst_h, x, y, r, g, b, scale);
}

void mglTextBig(float num, mtlByte *dst, int dst_bytes_per_pixel, mglByteOrder32 dst_order, int dst_w, int dst_h, int x, int y, mtlByte r, mtlByte g, mtlByte b, int scale)
{
	mtlString text;
	text.FromFloat(num);
	mglTextBig(text, dst, dst_bytes_per_pixel, dst_order, dst_w, dst_h, x, y, r, g, b, scale);
}

void mglTextSmall(const mtlChars &text, mtlByte *dst, int dst_bytes_per_pixel, mglByteOrder32 dst_order, int dst_w, int dst_h, int x, int y, mtlByte r, mtlByte g, mtlByte b, int scale)
{
	mglText(
		text,
		font_small_bits, font_small_width,
		font_small_char_count_width,
		font_small_char_width_px, font_small_char_height_px,
		dst, dst_bytes_per_pixel, dst_order, dst_w, dst_h,
		x, y,
		r, g, b,
		scale
	);
}

void mglTextSmall(int num, mtlByte *dst, int dst_bytes_per_pixel, mglByteOrder32 dst_order, int dst_w, int dst_h, int x, int y, mtlByte r, mtlByte g, mtlByte b, int scale)
{
	mtlString text;
	text.FromInt(num);
	mglTextSmall(text, dst, dst_bytes_per_pixel, dst_order, dst_w, dst_h, x, y, r, g, b, scale);
}

void mglTextSmall(float num, mtlByte *dst, int dst_bytes_per_pixel, mglByteOrder32 dst_order, int dst_w, int dst_h, int x, int y, mtlByte r, mtlByte g, mtlByte b, int scale)
{
	mtlString text;
	text.FromFloat(num);
	mglTextSmall(text, dst, dst_bytes_per_pixel, dst_order, dst_w, dst_h, x, y, r, g, b, scale);
}
