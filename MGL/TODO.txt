Ray plane intersections (with normal deformation)
BSP trees
Portals and PVS (http://www.gdcvault.com/play/1014234/Excerpt-Quake-Postmortem-Optimizing-Level)

On data layout
* If MGL is general purpose, with the possibility of using as a foundation for a hardware accelerated engine, then swizzling textures as cache optimization for the CPU doesn't make sense.
* Maybe use an indexing function that orders and fetches data in different ways?

==MGL repurpose==

--do not--
make a game engine
depend on a graphics implementation

--geometry--
some collision detection (poly vs poly)
spatial data structures (BSP, sparse voxel octree etc)
transforms with scene graphs
ray tracing/casting/surfing against grids and shapes (2d/3d)
clipping
extrusion volume generators
some offline calculations? (PVS, lightmap)

--software--
bit font rendering onto different kinds of buffers
texture blitting and scaling (use memset for speed)
rasterizer with a few modes for antialiasing and perspective correction

--ideal--
skeletal animation / blending

--fringe--
some model/texture loaders?
A star (A*)?

--in short--
i.e. all the tools you need to build a graphics engine short of actually
building a graphics engine
